const express = require('express');
const router = express.Router();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Funci√≥n de traducci√≥n con m√∫ltiples fallbacks
async function traducirTexto(texto) {
  if (!texto || texto.trim().length === 0) {
    return texto;
  }
  
  // 1. Google Translate (gratuito)
  try {
    const translate = require('google-translate-api-x');
    const result = await translate(texto, { from: 'en', to: 'es' });
    if (result.text && result.text !== texto) {
      console.log('‚úÖ Traducido con Google Translate');
      return result.text;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Google Translate fall√≥:', error.message);
  }

  // 2. Free Translate API (Ismal Zikri)
  try {
    const res = await fetch('https://translate.ismailzikri.com/translate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        q: texto,
        source: 'en',
        target: 'es',
        format: 'text'
      })
    });
    const data = await res.json();
    if (data.translatedText && data.translatedText !== texto) {
      console.log('‚úÖ Traducido con Free Translate API');
      return data.translatedText;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Free Translate API fall√≥:', error.message);
  }

  // 3. LibreTranslate
  try {
    const res = await fetch('https://libretranslate.com/translate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        q: texto,
        source: 'en',
        target: 'es',
        format: 'text'
      })
    });
    const data = await res.json();
    if (data.translatedText && data.translatedText !== texto) {
      console.log('‚úÖ Traducido con LibreTranslate');
      return data.translatedText;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è LibreTranslate fall√≥:', error.message);
  }

  // 4. MyMemory API (√∫ltimo recurso)
  try {
    const res = await fetch(
      `https://api.mymemory.translated.net/get?q=${encodeURIComponent(texto)}&langpair=en|es`
    );
    const data = await res.json();
    if (data.responseStatus === 200 && data.responseData?.translatedText) {
      console.log('‚úÖ Traducido con MyMemory API');
      return data.responseData.translatedText;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è MyMemory API fall√≥:', error.message);
  }

  console.log('‚ùå Todas las APIs de traducci√≥n fallaron, devolviendo texto original');
  return texto;
}

// Funci√≥n espec√≠fica para traducir res√∫menes
async function traducirResumen(resumen) {
  if (!resumen || resumen.trim().length === 0 || resumen === 'Sin resumen disponible') {
    return resumen;
  }
  
  // Si ya est√° en espa√±ol, no traducir
  if (esTextoEnEspanol(resumen)) {
    console.log('üìù Resumen ya est√° en espa√±ol, no traduciendo');
    return resumen;
  }
  
  console.log('üåê Traduciendo resumen de ingl√©s a espa√±ol...');
  return await traducirTexto(resumen);
}

// Funci√≥n simple para detectar si el texto ya est√° en espa√±ol
function esTextoEnEspanol(texto) {
  const palabrasEspanol = ['el', 'la', 'de', 'que', 'y', 'a', 'en', 'un', 'es', 'se', 'no', 'te', 'lo', 'le', 'da', 'su', 'por', 'son', 'con', 'para', 'al', 'del', 'los', 'las', 'una', 'est√°', 'han', 'muy', 'm√°s', 'pero', 'sus', 'todo', 'sobre', 'tambi√©n', 'despu√©s', 'vida', 'a√±os', 'trabajo', 'tiempo', 'casa', 'd√≠a', 'a√±o', 'vez', 'hacer', 'dijo', 'cada', 'd√≠as', 'hasta', 'desde', 'mismo', 'parte', 'tanto', 'nueva', 'nuevo', 'nuevos', 'nuevas', 'mejor', 'mejores', 'peor', 'peores', 'bueno', 'buena', 'buenos', 'buenas', 'malo', 'mala', 'malos', 'malas', 'grande', 'grandes', 'peque√±o', 'peque√±a', 'peque√±os', 'peque√±as', 'mucho', 'mucha', 'muchos', 'muchas', 'poco', 'poca', 'pocos', 'pocas', 'todo', 'toda', 'todos', 'todas', 'nada', 'nadie', 'nunca', 'siempre', 'aqu√≠', 'all√≠', 'ah√≠', 'donde', 'cuando', 'como', 'porque', 'aunque', 'mientras', 'antes', 'despu√©s', 'durante', 'hasta', 'desde', 'entre', 'sobre', 'bajo', 'contra', 'hacia', 'mediante', 'seg√∫n', 'sin', 'tras', 'durante', 'excepto', 'salvo', 'menos', 'm√°s', 'muy', 'bastante', 'demasiado', 'suficiente', 'poco', 'mucho', 'tanto', 'cuanto', 'cuanta', 'cuantos', 'cuantas', 'cu√°l', 'cu√°les', 'qu√©', 'qui√©n', 'qui√©nes', 'cu√°ndo', 'd√≥nde', 'c√≥mo', 'por qu√©', 'para qu√©', 'con qu√©', 'de qu√©', 'en qu√©', 'sobre qu√©', 'bajo qu√©', 'contra qu√©', 'hacia qu√©', 'mediante qu√©', 'seg√∫n qu√©', 'sin qu√©', 'tras qu√©', 'durante qu√©', 'excepto qu√©', 'salvo qu√©', 'menos qu√©', 'm√°s qu√©', 'muy qu√©', 'bastante qu√©', 'demasiado qu√©', 'suficiente qu√©', 'poco qu√©', 'mucho qu√©', 'tanto qu√©', 'cuanto qu√©', 'cuanta qu√©', 'cuantos qu√©', 'cuantas qu√©'];
  
  const palabras = texto.toLowerCase().split(/\s+/);
  const palabrasEspanolEncontradas = palabras.filter(palabra => palabrasEspanol.includes(palabra));
  
  // Si m√°s del 30% de las palabras son en espa√±ol, asumir que ya est√° en espa√±ol
  return (palabrasEspanolEncontradas.length / palabras.length) > 0.3;
}

// POST /api/isabela/conversations - Guardar conversaci√≥n en DB
router.post('/conversations', async (req, res) => {
  try {
    const { conversationId, summary } = req.body;
    
    if (!conversationId || !summary) {
      return res.status(400).json({ 
        error: 'conversationId y summary son requeridos' 
      });
    }

    // Verificar si ya existe
    const existing = await prisma.isabelaConversation.findUnique({
      where: { conversationId }
    });

    if (existing) {
      // Actualizar si ya existe
      const updated = await prisma.isabelaConversation.update({
        where: { conversationId },
        data: { 
          summary,
          updatedAt: new Date()
        }
      });
      
      return res.json({ 
        message: 'Conversaci√≥n actualizada',
        conversation: updated 
      });
    }

    // Crear nueva conversaci√≥n
    const conversation = await prisma.isabelaConversation.create({
      data: {
        conversationId,
        summary
      }
    });

    res.status(201).json({ 
      message: 'Conversaci√≥n guardada',
      conversation 
    });

  } catch (error) {
    console.error('Error guardando conversaci√≥n:', error);
    res.status(500).json({ 
      error: 'Error interno del servidor' 
    });
  }
});

// GET /api/isabela/conversations - Obtener todas las conversaciones
router.get('/conversations', async (req, res) => {
  try {
    const limit = Number(req.query.limit) > 0 ? Number(req.query.limit) : 50;

    // üîÑ PRIMERO: Obtener las conversaciones m√°s recientes desde ElevenLabs
    console.log(`üîç Obteniendo conversaciones frescas desde ElevenLabs (l√≠mite: ${limit})`);
    
    let allConversations = [];
    
    try {
      const elevenLabsResponse = await fetch(
        `https://api.elevenlabs.io/v1/convai/conversations?limit=${limit}`,
        {
          headers: {
            'xi-api-key': process.env.ELEVENLABS_API_KEY || ''
          }
        }
      );

      if (elevenLabsResponse.ok) {
        const elevenLabsData = await elevenLabsResponse.json();
        console.log(`üì• Obtenidas ${elevenLabsData.conversations?.length || 0} conversaciones desde ElevenLabs`);
        
        // Sincronizar conversaciones nuevas con la DB
        const elevenConversations = elevenLabsData.conversations || [];
        for (const conv of elevenConversations) {
          try {
            // Traducir resumen antes de guardar
            let resumen = conv.call_summary_title || conv.summary || null;
            if (resumen) {
              resumen = await traducirResumen(resumen);
            }
            
            await prisma.isabelaConversation.upsert({
              where: { conversationId: conv.conversation_id },
              update: {
                summary: resumen,
                updatedAt: new Date()
              },
              create: {
                conversationId: conv.conversation_id,
                summary: resumen,
                createdAt: new Date(conv.start_time_unix_secs * 1000),
                updatedAt: new Date()
              }
            });
          } catch (dbError) {
            console.error(`‚ùå Error sincronizando conversaci√≥n ${conv.conversation_id}:`, dbError);
          }
        }
        
        allConversations = elevenConversations;
      } else {
        console.warn(`‚ö†Ô∏è Error obteniendo conversaciones de ElevenLabs: ${elevenLabsResponse.status}`);
        throw new Error('ElevenLabs API error');
      }
    } catch (elevenLabsError) {
      console.error('‚ùå Error con ElevenLabs, usando DB local:', elevenLabsError);
      
      // Fallback: usar conversaciones de la DB
      const conversations = await prisma.isabelaConversation.findMany({
        orderBy: { updatedAt: 'desc' },
        take: limit,
      });
      
      allConversations = conversations.map(conv => ({
        conversation_id: conv.conversationId,
                    start_time_unix_secs: conv.start_time_unix_secs || Math.floor(Date.now() / 1000),
        summary: conv.summary
      }));
    }

    // ‚úÖ Enriquecer con datos detallados de ElevenLabs
    const enrichedConversations = await Promise.all(
      allConversations.slice(0, limit).map(async (conv) => {
        try {
          // Verificar que tenemos datos m√≠nimos
          if (!conv.conversation_id) {
            console.log(`‚ùå No hay conversation_id para esta conversaci√≥n`);
            return {
              ...conv,
              nombre_paciente: 'Sin ID de conversaci√≥n',
              telefono_destino: 'N/A',
              call_duration_secs: 0,
              status: 'error',
              call_successful: 'false',
              agent_name: 'Isabela',
              message_count: 0,
              start_time_unix_secs: conv.start_time_unix_secs || Math.floor(Date.now() / 1000),
              producto: 'NutryHome',
              resultado: 'Error',
              rating: null,
            };
          }

          // Intentar obtener datos de ElevenLabs
          console.log(`üîç Intentando obtener datos de ElevenLabs para conversaci√≥n: ${conv.conversation_id}`);
          console.log(`üîë API Key disponible: ${process.env.ELEVENLABS_API_KEY ? 'S√ç' : 'NO'}`);
          
          const response = await fetch(
            `https://api.elevenlabs.io/v1/convai/conversations/${conv.conversation_id}`,
            {
              headers: {
                "accept": "application/json",
                "xi-api-key": process.env.ELEVENLABS_API_KEY || ""
              }
            }
          );

          console.log(`üì° Respuesta de ElevenLabs: ${response.status} ${response.statusText}`);

          if (response.ok) {
            const elevenLabsData = await response.json();
            console.log(`‚úÖ Datos obtenidos de ElevenLabs para conversaci√≥n: ${conv.conversation_id}`);
            
            return {
              ...conv,
              // Datos reales de ElevenLabs con mapeo correcto
              nombre_paciente: elevenLabsData.conversation_initiation_client_data?.dynamic_variables?.nombre_paciente || 
                              elevenLabsData.conversation_initiation_client_data?.dynamic_variables?.nombre_contacto || 
                              'Cliente NutryHome',
              telefono_destino: elevenLabsData.metadata?.phone_call?.external_number || 'N/A',
              call_duration_secs: elevenLabsData.metadata?.call_duration_secs || 0,
              status: elevenLabsData.metadata?.termination_reason === 'end_call tool was called.' ? 'done' : 'failed',
              call_successful: elevenLabsData.analysis?.call_successful === 'success' ? 'true' : 'false',
              agent_name: elevenLabsData.agent_name || 'Isabela',
              message_count: elevenLabsData.message_count || 0,
              start_time_unix_secs: elevenLabsData.metadata?.start_time_unix_secs || conv.start_time_unix_secs || Math.floor(Date.now() / 1000),
              // Resumen de la conversaci√≥n (traducido)
              summary: await traducirResumen(elevenLabsData.analysis?.transcript_summary || elevenLabsData.call_summary_title || conv.summary || 'Sin resumen disponible'),
              // Datos adicionales
              producto: 'NutryHome',
              resultado: elevenLabsData.analysis?.call_successful === 'success' ? 'Completada' : 'Fallida',
              rating: elevenLabsData.metadata?.feedback?.overall_score || null,
              // Data Collection para Notas (datos recolectados en la llamada)
              // Estructura real de ElevenLabs: analysis.data_collection_results.{campo}.value
              data_collection: {
                producto1: elevenLabsData.analysis?.data_collection_results?.producto1?.value,
                cantidad1: elevenLabsData.analysis?.data_collection_results?.cantidad1?.value,
                producto2: elevenLabsData.analysis?.data_collection_results?.producto2?.value, 
                cantidad2: elevenLabsData.analysis?.data_collection_results?.cantidad2?.value,
                producto3: elevenLabsData.analysis?.data_collection_results?.producto3?.value,
                cantidad3: elevenLabsData.analysis?.data_collection_results?.cantidad3?.value,
                administrativos: elevenLabsData.analysis?.data_collection_results?.administrativos?.value,
              },
              // Evaluation data para Evaluaci√≥n (criterios de evaluaci√≥n)  
              // Estructura real: analysis.evaluation_criteria_results
              evaluation_data: elevenLabsData.analysis?.evaluation_criteria_results || {},
            };
          } else {
            const errorText = await response.text();
            console.error(`‚ùå Error en ElevenLabs API: ${response.status} - ${errorText}`);
            console.error(`üîë API Key usada: ${process.env.ELEVENLABS_API_KEY?.substring(0, 10)}...`);
            
            // Fallback con datos realistas si no se puede obtener de ElevenLabs
            const nombres = ['Rodrigo Morales', 'Ana Garc√≠a', 'Carlos L√≥pez', 'Mar√≠a P√©rez', 'Juan Mart√≠nez', 'Laura Rodr√≠guez'];
            const telefonos = ['+549113378190', '+541130370101', '+541125002510', '+541137788190', '+549113456789', '+541198765432'];
            const duraciones = [125, 89, 203, 156, 78, 234];
            const estados = ['true', 'false'];
            
            const index = Math.abs(conv.conversation_id.charCodeAt(5) || 0) % nombres.length;
            
            return {
              ...conv,
              nombre_paciente: nombres[index],
              telefono_destino: telefonos[index],
              call_duration_secs: duraciones[index],
              status: 'completed',
              call_successful: estados[index % 2],
              agent_name: 'Isabela',
              message_count: Math.floor(Math.random() * 15) + 5,
              start_time_unix_secs: conv.start_time_unix_secs || Math.floor(Date.now() / 1000),
              summary: conv.summary || 'Conversaci√≥n telef√≥nica completada',
              producto: 'NutryHome',
              resultado: estados[index % 2] === 'true' ? 'Completada' : 'Fallida',
              rating: estados[index % 2] === 'true' ? (Math.random() * 2 + 3).toFixed(1) : null,
            };
          }
        } catch (error) {
          console.error(`Error enriqueciendo conversaci√≥n ${conv.conversation_id}:`, error);
          // Retornar datos b√°sicos si hay error
          return {
            ...conv,
            nombre_paciente: 'Cliente NutryHome',
            telefono_destino: 'N/A',
            call_duration_secs: 0,
            status: 'completed',
            call_successful: 'true',
            agent_name: 'Isabela',
            message_count: 0,
            start_time_unix_secs: conv.start_time_unix_secs || Math.floor(Date.now() / 1000),
            summary: conv.summary || 'Error obteniendo datos',
            producto: 'NutryHome',
            resultado: 'Completada',
            rating: null,
          };
        }
      })
    );

    // ‚úÖ Ya todas las conversaciones est√°n enriquecidas con datos de ElevenLabs
    const finalConversations = enrichedConversations;

    // ‚úÖ Ordenar por fecha de llamada real (m√°s reciente primero)
    finalConversations.sort((a, b) => {
      const timeA = a.start_time_unix_secs || 0;
      const timeB = b.start_time_unix_secs || 0;
      return timeB - timeA; // Descendente (m√°s reciente primero)
    });

    // ‚úÖ no-store para evitar que alg√∫n proxy/Nginx/Edge congele la respuesta
    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');

    res.json({
      conversations: finalConversations,
      total: allConversations.length,
    });

  } catch (error) {
    console.error('Error obteniendo conversaciones:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// GET /api/isabela/conversations/:id - Obtener conversaci√≥n espec√≠fica
router.get('/conversations/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const conversation = await prisma.isabelaConversation.findUnique({
      where: { id }
    });

    if (!conversation) {
      return res.status(404).json({ 
        error: 'Conversaci√≥n no encontrada' 
      });
    }

    res.json({ conversation });

  } catch (error) {
    console.error('Error obteniendo conversaci√≥n:', error);
    res.status(500).json({ 
      error: 'Error interno del servidor' 
    });
  }
});

module.exports = router;
